ARCHITECTURE:
==============
PLAYBOOK  : its a file which consist of code
INVENTORY : its a file which consist ip of nodes
SSH       : used to connect with nodes
Ansible   : Agent less. Means no need to install any software on worker nodes.

SETUP:
=======
CREATE SERVERS = 3

EXECUTE THE BELOW COMMANDS ON ALL SERVERS:
sudo -i
hostnamectl set-hostname (#ansible/dev-1/test-1)
sudo -i
passwd root  (#to login to other servers)
vim /etc/ssh/sshd_config (#38 & 61 uncomment both lines) 
systemctl restart sshd
systemctl status sshd
hostname -i

THE BELOW STEPS NEED TO BE RUN ON ANSIBLE SERVER:
amazon-linux-extras install ansible2 -y
yum install python3 python-pip python-dlevel -y

vim /etc/ansible/hosts
[dev]
172.31.20.40
[test]
172.31.31.77

ssh-keygen (#enter 4 times)
ssh-copy-id root@private ip of dev-1 -- > yes -- > password -- > ssh private ip -- > ctrl d
ssh-copy-id root@private ip of test-1 -- > yes -- > password -- > ssh private ip -- > ctrl d
ansible all -m ping (#To check worker node connection with ansible server)

ADHOC COMMANDS
======================================
ansible all -a "yum install git -y"
ansible all -a "yum install maven -y"
ansible all -a "mvn --version"
ansible all -a "touch file1"
ansible all -a "touch raham.txt"
ansible all -a "ls"
ansible all -a "yum install httpd -y"
ansible all -a "systemctl status httpd"
ansible all -a "systemctl start httpd"
ansible all -a "user add raham"
ansible all -a "cat /etc/passwd"
ansible all -a "yum remove git* maven* httpd* -y"

MODULES:
==============
ansible all -m yum -a "name=git state=present"
ansible all -m yum -a "name=maven state=present"	[present=installed]
ansible all -m service -a "name=httpd state=started"	[started=restart]
ansible all -m service -a "name=httpd state=stopped"	[stopped=stop]
ansible all -m yum -a "name=http state=absent"		[absent=uninstall]
ansible all -m user -a "name=vikram state=present"
ansible all -m user -a "name=vikram state=absent"
ansible all -m copy -a "src=raham.txt dest=/tmp"

 PLAYBOOKS:
================
EX-1:
=====
-hosts: all
task:
  - name: task-1
    yum: name=maven state=present
    when: ansible_os_family == "RedHat"
  - name: task-2
    apt: name=maven state=present
    when: ansible_os_family == "ubuntu"

ansible-palybook.raham.yml

EX-2:
=====
- hosts: all
  tasks:
    - name: installing git
      yum: name=git state=present

    - name: installing httpd
      yum: name=httpd state=present


EX-3:
=====
hosts: all
  ignore_errors: true
  tasks:
    - name: installing git
      yum: name=git state=absent

    - name: installing httpd
      yum: name=httpd state=absent

SETUP MODULE:
================
used to print the complete info of worker nodes
ansible all -m setup 

ansible all -m setup  | grep -i family
ansible all -m setup  | grep -i pkg
ansible all -m setup  | grep -i cores

TAGS:
============
by deafult ansible will execute all tasks sequentially in a playbook.
we can use tags to execute a specific tasks or to skip a specific tasks.

- hosts: all
  ignore_errors: yes
  tasks:
    - name: installing git
      yum: name=git state=present
      tags: a

    - name: installing httpd
      yum: name=httpd state=present
      tags: b

    - name: starting httpd
      service: name=httpd state=started
      tags: c

    - name: create a user
      user: name=kohli state=present
      tags: d

    - name: copy a file
      copy: src=index.html dest=/tmp
      tags: e

SINGLE TAG: ansible-playbook raham.yml --tags d
MULTI TAGS: ansible-playbook raham.yml --tags b,c

VARIABLES:
==============
STATIC VARS: vars inside the playbook
============
- hosts: all
  vars:
    a: maven
    b: httpd
  tasks:
    - name: installing maven
      yum: name={{a}} state=present
    - name: installing httpd
      yum: name={{b}} state=present

DYNAMIC VARS: vars outside the playbook a
=============
- hosts: all
  vars:
  tasks:
    - name: installing maven
      yum: name={{a}} state=absent
    - name: installing httpd
      yum: name={{b}} state=absent

ansible-playbook raham.yml --extra-vars "a=docker b=httpd"

LOOPS: 
=========
- hosts: all
  tasks:
    - name: installing pkg
      yum: name={{item}} state=present
      with_items:
        - git
        - java
        - maven
        - docker
        - httpd


ansible all -a "git -v"
ansible all -a "java -v"
ansible all -a "maven -v"
ansible all -a "docker -v"
ansible all -a "httpd -v"

- hosts: all
  tasks:
    - name: creating users
      user: name={{item}} state=present
      with_items:
        - ravi
        - shiva
        - rajesh
        - shivani
        - luckyy

DEBUG
=======
debug = print the information
setup = give all information from worknode

ansible all -m setup

NAME	: ansible_nodename
FAMILY  : ansible_os_family
PKG	: ansible_pkg_mgr
CPU	: ansible_processor_cores
MEM	: ansible_memtotal_mb
FREE	: ansible_memfree_mb

- hosts: all
  tasks:
    - name: printing a msg
      debug:
        msg: "server name is: {{ansible_nodename}},
              it belongs to: {{ansible_os_family}},
              package maneger is: {{ansible_pkg_mgr}},
              cpu comsumed is: {{ansible_processor_cores}},
              total ram is: {{ansible_memtotal_mb}},
              free ram available is: {{ansible_memfree_mb}}"

LOOKUPS
=========
extract the data from files, db and key values

- hosts: dev
  vars:
    a: "{{lookup('file', '/root/creds.txt') }}"
  tasks:
    - debug:
        msg: "hai my user name is {{a}}"

cat creds.txt
user=raham
password=test123
cat raham.yml

ansible-playbook raham.yml

STRATAGIES: Way of executing the playbook.
===============================

LINEAR: execute tasks sequentially 
        if task-1 is executed on server-1 it will wait till task-2 execution
FREE:   execute all tasks on all node at same time
        if task-1 is executed on server-1 it wont wait till task-2 execution
ROLLING:
BATCH:

ROLES
========
mkdir playbooks
cd playbooks/

mkdir -p roles/pkgs/tasks
vim roles/pkgs/tasks/main.yml

- name: installing pkgs
  yum: name=git state=present
- name: install maven
  yum: name=maven state=present
- name: installing docker
  yum: name=docker state=present

mkdir -p roles/users/tasks
vim roles/users/tasks/main.yml

- name: create users
  user: name={{item}} state=present
  with_items:
    - uday
    - naveen
    - rohit
    - lokesh
    - saipallavi
    - supriya

mkdir -p roles/webserver/tasks
vim roles/web/tasks/main.yml

- name: installing httpd
  yum: name=httpd state=present

- name: starting httpd
  service: name=httpd state=started

cat master.yml

- hosts: all
  roles:
    - pkgs
    - users
    - webserver

find . -type f -exec sed -i 's/present/absent/g' {} \;

ANSIBLE VAULT:
================
it is used to encrypt the files, playbooks ----
Technique: AES256 (USED BY FACEBOOK, AWS)
vault will store our data very safely and securely.
if we want to access any data which is in the vault we need to give a password.
Note: we can restrict the users to access the playbook also.

cat creds.txt
user=raham
passowrd=test123

ansible-vault create creds1.txt		: to create a vault
ansible-vault edit creds1.txt		: to edit a vault
ansible-vault rekey creds1.txt		: to change password for a vault
ansible-vault decrypt creds1.txt	: to decrypt the content	
ansible-vault encrypt creds1.txt	: to encrypt the content	
ansible-vault view creds1.txt		: to show the content without decrypt

PIP: its a pkg manager used to install python libs/modules
============================================================
Redhat: yum
ubuntu: apt
python: pip

- hosts: all
  tasks:
    - name: install pip
      yum: name=pip state=present

    - name: installing NumPy
      pip: name=NumPy state=present

    - name: installing Pandas
      pip: name=Pandas state=present
=================================================================================
POJECT-FRONTEND NETFLIX-CLONE
=====================================================================================

WEB SERVER : TO SHOW THE APP : httpd   : 80    : /var/www/html    : frontend code
APP SERVER : TO USE THE APP  : Tomcat  : 8080  : tomcat/webapps   : frontend code + backend code

- hosts: all
  tasks:
    - name: installing httpd
      yum: name=httpd state=present

    - name: starting httpd
      service: name=httpd state=started

    - name: installing git
      yum: name=git state=present

    - name: checkout git
      git:
        repo: https://github.com/purushottam-tech/netflix-clone.git
        dest: /var/www/html

ansible-playbook deploy.yml

===============================================================================
PROJECT-FORNTEND-BACKEND ANSIBLE 
================================================================================
ansible-server

vim tomcat.yml

- hosts: all
  tasks:
    - name: download tomcat from downloads
      get_url:
        url: "https://downloads.apache.org/tomcat/tomcat-9/v9.0.107/bin/apache-tomcat-9.0.107.tar.gz"
        dest: "/root/"

    - name: untar the apache file
      command: tar -zxvf apache-tomcat-9.0.107.tar.gz


    - name: rename the tomcat
      command: mv apache-tomcat-9.0.107 tomcat
      tags: abc

   - name: install java
     command: yum install java-1.8.0-openjdk -y


    - name: setting the roles in tomcat-user.xml file
      template:
        src: tomcat-users.xml
        dest: /root/tomcat/conf/tomcat-users.xml

    - name: delete two lines in context.xml
      template:
        src: context.xml
        dest: /root/tomcat/webapps/manager/META-INF/context.xml

    - name: start the tomcat
      shell: nohup /root/tomcat/bin/startup.sh


vim context.yml
use script

ansible-playbook tomcat.yml
