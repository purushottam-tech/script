MINIKUBE
=============================
vim minikube.sh

sudo apt update -y
sudo apt upgrade -y
sudo apt install curl wget apt-transport-https -y
sudo curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo mv minikube-linux-amd64 /usr/local/bin/minikube
sudo chmod +x /usr/local/bin/minikube
sudo minikube version
sudo curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
sudo curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
sudo echo "$(cat kubectl.sha256) kubectl" | sha256sum --check
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
sudo minikube start --driver=docker --force

sh minikube.sh

METHOD POD CREATE
===================
Imperative (command)
Declarative (manifest file)

IMPERATIVE:
kubectl run pod1 --image purushottambawane805/mmoviesrepo:latest
kubectl get po
kubectl get pod -o wide
kubectl describe pod pod1
kubectl delete pod pod1

DECRALATIVE:
vim pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: pod1
spec:
  containers:
    - name: cont1
      image: purushottambawane805/moviesrepo:latest

execution: 
kubectl create -f pod.yml
kubectl get pods/pod/po
kubectl get pod -o wide
kubectl describe pod pod1
kubectl delete -f raham.yml

REPLICASET
=================
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: movies
  labels:
    app: paytm
spec:
  replicas: 3
  selector:
    matchLabels:
      app: paytm
  template:
    metadata:
      labels:
        app: paytm
    spec:
      containers:
        - name: cont1
          image: purushottambawane805/moviesrepo:latest

To list rs		          : kubectl get rs
To show addtional info	: kubectl get rs -o wide
To show complete info 	: kubectl describe rs movies
To delete the rs	      : kubectl delete rs movies
to get lables of pods 	: kubectl get pods -l app=paytm
TO scale rs		          : kubectl scale rs/movies --replicas=10 (LIFO)

DRAWBACK: it won't update the application & rollin & rollout
------------------------------------------------------------

kubectl describe po | grep -i image
kubectl edit rs/movies
kubectl describe po | grep -i image

DEPLOYMENT
==================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: movies
  labels:
    app: paytm
spec:
  replicas: 3
  selector:
    matchLabels:
      app: paytm
  template:
    metadata:
      labels:
        app: paytm
    spec:
      containers:
        - name: cont1
          image: purushottambawane805/moviesrepo:latest

To list deploy		          : kubectl get deploy
To show addtional info	    : kubectl get deploy -o wide
To show complete info 	    : kubectl describe deploy movies
To delete the deploy	      : kubectl delete deploy movies
to get lables of pods 	    : kubectl get pods -l app=paytm
TO scale deploy		          : kubectl scale deploy/movies --replicas=10 (LIFO)
To show all pod labels	    : kubectl get pods --show-labels
To delete all pods	        : kubectl delete pod --all

kubectl describe po | grep -i image
kubectl edit deploy/movies
kubectl describe po | grep -i image

kubectl rollout history deploy/movies
kubectl rollout undo deploy/movies
kubectl rollout status deploy/movies
kubectl rollout pause deploy/movies
kubectl rollout resume deploy/movies
======================================================================================================================================
KOPS (Kubernetes operations)
=======================================================================================================================================

STEP-1: GIVING PERMISSIONS
        IAM -- > USER -- > CREATE USER -- > NAME: KOPS -- > Attach Polocies Directly -- > AdministratorAccess -- > NEXT -- > CREATE USER
        USER -- > SECURTITY CREDENTIALS -- > CREATE ACCESS KEYS -- > CLI -- > CHECKBOX -- >  CREATE ACCESS KEYS -- > DOWNLOAD

        aws confiure
        aws access key (copy)
        aws secreat key (copy)
        ap-south-01
        table

STEP-2: INSTALL KUBECTL AND KOPS
        vim .bashrc
        export PATH=$PATH:/usr/local/bin/  -- > save and exit
        source .bashrc

        curl -LO "https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        LATEST_KOPS_VERSION=$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)
        curl -LO "https://github.com/kubernetes/kops/releases/download/v1.30.1/kops-linux-amd64"
        chmod +x kubectl kops-linux-amd64
        sudo mv kubectl /usr/local/bin/kubectl
        sudo mv kops-linux-amd64 /usr/local/bin/kops
        kubectl version --client
        kops version

STEP-3: CREATING BUCKET 
        aws s3api create-bucket \
        --bucket devopsbatchapr600pm776789dope.k8s.local \
        --region ap-south-1 \
        --create-bucket-configuration LocationConstraint=ap-south-1
        aws s3api get-bucket-versioning --bucket devopsbatchapr600pm776789dope.k8s.local --region ap-south-1 
        export KOPS_STATE_STORE=s3://devopsbatchapr600pm776789dope.k8s.local

STEP-4: CREATING THE CLUSTER
        kops create cluster --name purushottam.k8s.local --zones ap-south-1b --master-count=1 --master-size t3.medium --node-count=2 --node-size t3.micro
        kops update cluster --name purushottam.k8s.local --yes --admin

Suggestions:
       * list clusters with: kops get cluster
       * edit this cluster with: kops edit cluster purushottam.k8s.local
       * edit your node instance group: kops edit ig --name=purushottam.k8s.local nodes-ap-south-1b
       * edit your master instance group: kops edit ig --name=purushottam.k8s.local master-ap-south-1b

ADMIN ACTIVITIES:
       To scale the worker nodes:
       kops edit ig --name=purushottam.k8s.local nodes-ap-south-1b
       kops update cluster --name purushottam.k8s.local --yes --admin 
       kops rolling-update cluster --yes

TO DELETE:
       kops delete cluster --name purushottam.k8s.local --yes

NAMESPACES:
TYPES: default     
       kube-node-lease 
       kube-public	  
       kube-system 	 

kubectl get pod -n kube-system	                     : to list all pods in kube-system namespace
kubectl get pod -n default	                         : to list all pods in default namespace
kubectl get pod -n kube-public	                     : to list all pods in kube-public namespace
kubectl get po -A		                                 : to list all pods in all namespaces

kubectl create ns dev	                                             : to create namespace
kubectl config set-context --current --namespace=dev               : to switch to the namespace
kubectl config view                                                : to see current namespace
kubectl run dev1 --image purushottambawane805/moviesrepo:latest
kubectl run dev2 --image purushottambawane805/moviesrepo:latest
kubectl run dev3 --image purushottambawane805/moviesrepo:latest
kubectl create ns test	                                           : to create namespace
kubectl config set-context --current --namespace=test              : to switch to the namespace
kubectl config view                                                : to see current namespace
kubectl get po -n dev
kubectl delete pod dev1 -n dev
kubectl delete ns dev	                                             : to delete namespace
kubectl delete pod --all                                           : to delete all pods


DAEMONSET:
=======================
vim deploy.yml

apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: paytm
  name: movies
spec:
  selector:
    matchLabels:
      app: paytm
  template:
    metadata:
      labels:
        app: paytm
    spec:
      containers:
      - name: cont1
        image: purushottambawane805/moviesrepo:latest
        ports:
          - containerPort: 80

kubectl create -f deploy.yml


SERVICE:
=================
CLUSTERIP
----------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: movies
  labels:
    app: paytm
spec:
  replicas: 3
  selector:
    matchLabels:
      app: paytm
  template:
    metadata:
      labels:
        app: paytm
    spec:
      containers:
        - name: cont1
          image: purushottambawane805/moviesrepo:latest
          ports:
            - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: service1
spec:
  type: ClusterIP
  selector:
    app: paytm
  ports:
    - port: 80


NODEPORT:
====================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: movies
  labels:
    app: paytm
spec:
  replicas: 3
  selector:
    matchLabels:
      app: paytm
  template:
    metadata:
      labels:
        app: paytm
    spec:
      containers:
        - name: cont1
          image: purushottambawane805/moviesrepo:latest
          ports:
            - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: service1
spec:
  type: NodePort
  selector:
    app: paytm
  ports:
    - port: 80
      nodePort: 31111

LOADBALACER:
--------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: swiggy
  name: swiggy-deploy
spec:
  replicas: 3
  selector:
    matchLabels:
      app: swiggy
  template:
    metadata:
      labels:
        app: swiggy
    spec:
      containers:
      - name: cont1
        image: rahamshaik/trainservice:latest
        ports:
          - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: abc
spec:
  type: LoadBalancer
  selector:
    app: swiggy
  ports:
    - port: 80
      targetPort: 80


METRIX SERVER -(AUTOSCALING)
==================
1) HPA = web & apps server (New)
2) VPA = database server (existing)

FOR MINIKUBE:
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
minikube addons enable metrics-server #(only for minikube)

FOR KOPS:
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/high-availability-1.21+.yaml

vim deploy.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: movies
  labels:
    app: paytm
spec:
  replicas: 3
  selector:
    matchLabels:
      app: paytm
  template:
    metadata:
      labels:
        app: paytm
    spec:
      containers:
        - name: cont1
          image: purushottambawane805/moviesrepo:latest

kubectl apply -f deploy.yml
kubectl get all
kubectl get deploy 
kubectl autoscale deployment movies --cpu-percent=20 --min=1 --max=10
kubectl get hpa
kubectl desribe hpa movies
kubectl get all

open second terminal and give
kubectl get po --watch

come to first terminal and go inside pod
kubectl exec mydeploy-6bd88977d5-7s6t8 -it -- /bin/bash

apt update -y
apt install stress -y
stress 

check terminal two to see live pods


QUOTAS
=====================
kubectl get ns
kubectl create ns dev
kubectl get ns
kubectl config set-context --current --namespace=dev
kubectl config view

vim quotas.yml

apiVersion: v1
kind: ResourceQuota
metadata:
  name: dev-quota
  namespace: dev
spec:
  hard:
    pods: "5"
    limits.cpu: "1"
    limits.memory: 1Gi

kubectl create -f quotas.yml
kubectl get quota

EX-1
-------
 vim deploy.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: movies
  labels:
    app: paytm
spec:
  replicas: 3
  selector:
    matchLabels:
      app: paytm
  template:
    metadata:
      labels:
        app: paytm
    spec:
      containers:
        - name: cont1
          image: purushottambawane805/moviesrepo:latest
          resources:
            limits:
              cpu: "1"
              memory: 512Mi

kubectl create -f dep.yml
kubectl get quota
kubectl get deploy
kubectl get po

Ex-2
----------
vim quotas.yml

apiVersion: v1
kind: ResourceQuota
metadata:
  name: dev-quota
  namespace: dev
spec:
  hard:
    pods: "5"
    limits.cpu: "2"
    limits.memory: 2Gi

kubectl apply -f quotas.yml
kubectl get quota

vim deploy.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: movies
  labels:
    app: paytm
spec:
  replicas: 3
  selector:
    matchLabels:
      app: paytm
  template:
    metadata:
      labels:
        app: paytm
    spec:
      containers:
        - name: cont1
          image: purushottambawane805/moviesrepo:latest
          resources:
            limits:
              cpu: "0.3"
              memory: 200Mi

kubectl apply -f deploy.yml

PV-PVC
============================
pv.yml

apiVersion: v1
kind: PersistentVolume
metadata:
  name: my-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  awsElasticBlockStore:
    volumeID: vol-0bc873ea0ae1c7f35
    fsType: ext4

kubectl create -f pv.yml
kubectl get pv

pvc.yml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

kubectl create -f pvc.yml
kubectl get pvc

dep.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pvdeploy
spec:
  replicas: 1
  selector:
    matchLabels:
     app: paytm
  template:
    metadata:
      labels:
        app: paytm
    spec:
      containers:
      - name: cont1
        image: purushottambawane805/moviesrepo:latest
        command: ["/bin/bash", "-c", "sleep 10000"]
        volumeMounts:
        - name: my-pv
          mountPath: "/tmp/persistent"
      volumes:
        - name: my-pv
          persistentVolumeClaim:
            claimName: my-pvc

kubectl create -f deploy.yml
kubectl get deploy
kubectl get po
kubectl describe deploy pvdeploy
kubectl describe po

kubectl exec -it pvdeploy-5f5ffc94-qkd49 -- /bin/bash


CONFIG-MAPS
====================================
kubectl run pod1 --image mysql
kubectl get po
kubectl delete pod pod1

kubectl create deploy swiggydb --image=mariadb
kubectl get po
kubectl logs swiggydb-5f5586944c-t7cqn
kubectl set env deploy swiggydb MYSQL_ROOT_PASSWORD=Puru123 (for single value pass)

for multiple value
================
vim varsfile
MYSQL_ROOT_PASSWORD=Puru123
MYSQL_USER=admin

kubectl create cm dbvars --from-env-file=varsfile
kubectl describe cm dbvars
kubectl get po (showing crashllookup)
kubectl set env deploy swiggydb --from=cm/dbvars
kubectl get po
kubectl delete deploy swiggydb

SECRETS (store sensitive data)
=====================================
TYPES
1) generic
2) TLS (transfer layser security)
3) docker registry

kubectl create deploy swiggydb --image=mariadb
kubectl get po
kubectl logs swiggydb-5f5586944c-t7cqn
kubectl create secret generic password --from-literal=MYSQL_ROOT_PASSWORD=puru123
kubectl get secret
kubectl describe secret password
kubectl get po
kubectl set env deploy swiggydb --from=secret/password
kubectl get po

 


